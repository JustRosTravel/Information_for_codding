Сделать метод joinData транзакционным, т.е. если произошел сбой, то данные не должны быть изменены.
1. Считать с консоли 2 имени файла.
2. Считать построчно данные из файлов. Из первого файла - в allLines, из второго - в forRemoveLines.
В методе joinData:
3. Если список allLines содержит все строки из forRemoveLines, то удалить из списка allLines все строки, которые есть в forRemoveLines.
4. Если условие из п.3 не выполнено, то:
4.1. очистить allLines от данных
4.2. выбросить исключение CorruptedDataException
Метод joinData должен вызываться в main. Все исключения обработайте в методе main.
Не забудь закрыть потоки.

public static void main(String[] args) {
        try {
            first = readLine.readLine();
            second = readLine.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        readList(allLines, first);
        readList(forRemoveLines, second);
//        System.out.println(allLines);
//        System.out.println(forRemoveLines);
        try {
            new Solution().joinData();
        } catch (CorruptedDataException e) {
            e.printStackTrace();
        }
//        System.out.println(allLines);

    }

    public static void readList(List<String> arr, String text) { 
    // Можно переписать считывание как, выглядит изящнее: 
   //List<String> lines = Files.readAllLines(Paths.get(FILE_NAME), StandardCharsets.UTF_8);
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(text)))) {
            String line;
            while ((line = reader.readLine()) != null) {
                arr.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void joinData() throws CorruptedDataException {
        if (allLines.containsAll(forRemoveLines)) { // Сравниваем массив allLines со всеми строчками из массива forRemoveLines
            allLines.removeAll(forRemoveLines);     // Удаляем все похожие строчки
        } else {
            allLines.clear();
            throw new CorruptedDataException();
        }
    }
