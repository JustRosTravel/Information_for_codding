CRUD 2
CrUD Batch - multiple Creation, Updates, Deletion.

Программа запускается с одним из следующих наборов параметров:
-c name1 sex1 bd1 name2 sex2 bd2 ...
-u id1 name1 sex1 bd1 id2 name2 sex2 bd2 ... 
-d id1 id2 id3 id4 ...
-i id1 id2 id3 id4 ...

Значения параметров:
name - имя, String
sex - пол, "м" или "ж", одна буква
bd - дата рождения в следующем формате 15/04/1990
-с - добавляет всех людей с заданными параметрами в конец allPeople, выводит id (index) на экран в соответствующем порядке
-u - обновляет соответствующие данные людей с заданными id
-d - производит логическое удаление человека с id, заменяет все его данные на null
-i - выводит на экран информацию о всех людях с заданными id: name sex bd

id соответствует индексу в списке.
Формат вывода даты рождения 15-Apr-1990
Все люди должны храниться в allPeople.
Порядок вывода данных соответствует вводу данных.
Обеспечить корректную работу с данными для множества нитей (чтоб не было затирания данных).
Используйте Locale.ENGLISH в качестве второго параметра для SimpleDateFormat.

Пример вывода для параметра -і с двумя id:
Миронов м 15-Apr-1990
Миронова ж 25-Apr-1997


Требования:
1. Класс Solution должен содержать public static volatile поле allPeople типа List<Person>.
2. Класс Solution должен содержать статический блок, в котором добавляются два человека в список allPeople.
3. При параметре -с программа должна добавлять всех людей с заданными параметрами в конец списка allPeople, и выводить id каждого (index) на экран.
4. При параметре -u программа должна обновлять данные людей с заданными id в списке allPeople.
5. При параметре -d программа должна логически удалять людей с заданными id в списке allPeople.
6. При параметре -i программа должна выводить на экран данные о всех людях с заданными id по формату указанному в задании.
7. Метод main класса Solution должен содержать оператор switch по значению args[0].
8. Каждый case оператора switch должен иметь блок синхронизации по allPeople.

public static volatile List<Person> allPeople = new ArrayList<Person>();
    public static String sex;
    public static Date date;
    public static Person upgradePerson;

    static {
        allPeople.add(Person.createMale("Иванов Иван", new Date()));  //сегодня родился    id=0
        allPeople.add(Person.createMale("Петров Петр", new Date()));  //сегодня родился    id=1
    }

    public static void main(String[] args) {
        String[] words = args;
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);

        switch (args[0]) {
            case ("-c"):
                synchronized (allPeople) {
                    for (int i = 1; i < words.length; i += 3) {
                        try {
                            date = format.parse(words[i + 2]);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        if (words[i + 1].contains("м")) {
                            allPeople.add(Person.createMale(words[i], date));
                            System.out.println(allPeople.size() - 1);

                        } else if (words[i + 1].contains("ж")) {
                            allPeople.add(Person.createFemale(words[i], date));
                            System.out.println(allPeople.size() - 1);
                        }
                    }
                }
                break;

            case ("-u"):
                synchronized (allPeople) {
                    for (int i = 1; i < words.length; i += 4) {
                        try {
                            date = format.parse(words[i + 3]);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        upgradePerson = allPeople.get(Integer.parseInt(words[i]));
                        upgradePerson.setSex(checkSex(words, i + 2));
                        upgradePerson.setBirthDate(date);
                        upgradePerson.setName(words[i + 1]);
                    }
                }
                break;

            case ("-d"):
                synchronized (allPeople) {
                    for (int i = 1; i < words.length; i++) {
                        upgradePerson = allPeople.get(Integer.parseInt(words[i]));
                        upgradePerson.setSex(null);
                        upgradePerson.setName(null);
                        upgradePerson.setBirthDate(null);
                    }
                }
                break;

            case ("-i"):
                synchronized (allPeople) {
                    for (int i = 1; i < words.length; i++) {
                        upgradePerson = allPeople.get(Integer.parseInt(words[i]));
                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
                        sex = (upgradePerson.getSex() == Sex.MALE) ? "м" : "ж";
                        System.out.println(upgradePerson.getName() + " " + sex + " " + dateFormat.format(upgradePerson.getBirthDate()));
                    }
                }
                break;
        }
    }

    public static Sex checkSex(String words[], int i) {
        return words[i].equals("м") ? Sex.MALE : Sex.FEMALE;
    }
