//Последовательный вывод файлов
//1. Разберись, что делает программа.
//2. В статическом блоке считай 2 имени файла firstFileName и secondFileName.
//3. Внутри класса Solution создай нить public static ReadFileThread, которая реализует
//интерфейс ReadFileInterface (Подумай, что больше подходит - Thread или Runnable).
//3.1. Метод setFileName должен устанавливать имя файла, из которого будет читаться содержимое.
//3.2. Метод getFileContent должен возвращать содержимое файла.
//3.3. В методе run считай содержимое файла, закрой поток. Раздели пробелом строки файла.
//4. Подумай, в каком месте нужно подождать окончания работы нити, чтобы обеспечить последовательный вывод файлов.
//4.1. Для этого добавь вызов соответствующего метода.

public class Solution {
    public static String firstFileName;
    public static String secondFileName;
    public static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

    static {
        try {
            firstFileName = reader.readLine();  // Считываем ссылки на файлы
            secondFileName = reader.readLine(); //
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public static void main(String[] args) throws InterruptedException {
        systemOutPrintln(firstFileName);
        systemOutPrintln(secondFileName);
    }

    public static void systemOutPrintln(String fileName) throws InterruptedException {
        ReadFileInterface f = new ReadFileThread();
        f.setFileName(fileName);
        f.start();
        f.join();
        System.out.println(f.getFileContent());
    }

    public interface ReadFileInterface {

        void setFileName(String fullFileName);

        String getFileContent();

        void join() throws InterruptedException;

        void start();
    }

    public static class ReadFileThread extends Thread implements ReadFileInterface {
        private String fileName;
        List<String> arr;
        public StringBuilder stringBuilder = new StringBuilder();

        @Override
        public void setFileName(String fullFileName) {
            this.fileName = fullFileName;
        }

        @Override
        public String getFileContent() {

            return stringBuilder + ""; // Возвращаем результат stringBuilder учитывая, что строка может быть пустой и записываем ""
        }

        @Override
        public void run() {
            try {
                arr = Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8); // Считываем все строки в массив
                for (String line : arr) {
                    stringBuilder.append(line + " ");             // Преобразуем черезе StringBuilder все строки в одну через пробел
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
}

