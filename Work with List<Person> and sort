CrUD - Create, Update, Delete.

Программа запускается с одним из следующих наборов параметров:
-c name sex bd
-u id name sex bd
-d id
-i id

Значения параметров:
name - имя, String
sex - пол, "м" или "ж", одна буква
bd - дата рождения в следующем формате 15/04/1990
-c - добавляет человека с заданными параметрами в конец allPeople, выводит id (index) на экран
-u - обновляет данные человека с данным id
-d - производит логическое удаление человека с id, заменяет все его данные на null
-i - выводит на экран информацию о человеке с id: name sex (м/ж) bd (формат 15-Apr-1990)

--------
public static void main(String[] args) throws IOException {
//        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//        String textPerson;
//        while (!(textPerson = reader.readLine()).equals("close")) {
//            System.out.println("длинна массива: " + allPeople.size());


//        String textPerson = reader.readLine();
            String[] words = args;
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);


            if (args[0].contains("-c")) {
                Date date = null;
                try {
                    date = format.parse(words[words.length - 1]);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                if (words[words.length - 2].contains("м")) {
                    allPeople.add(Person.createMale(words[1], date));
                    System.out.println(allPeople.size() - 1);
//                    System.out.println(allPeople.get(allPeople.size() - 1).getName() + allPeople.get(allPeople.size() - 1).getBirthDate());
                } else if (words[words.length - 2].contains("ж")) {
                    allPeople.add(Person.createFemale(words[1], date));
                    System.out.println(allPeople.size() - 1);
                }
//                System.out.println("длинна массива -c: " + allPeople.size());

            } else if (args[0].contains("-u")) {
                Date date = null;
                try {
                    date = format.parse(words[words.length - 1]);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                Person upgradePerson = allPeople.get(Integer.parseInt(words[1]));
                upgradePerson.setBirthDate(date);
                upgradePerson.setName(words[2]);
                upgradePerson.setSex(checkSex(words));
//                System.out.println("длинна массива -u: " + allPeople.size());

            } else if (args[0].contains("-d")) {
                Person upgradePerson = allPeople.get(Integer.parseInt(words[1]));
                upgradePerson.setSex(null);
                upgradePerson.setName(null);
                upgradePerson.setBirthDate(null);
//                System.out.println("длинна массива -d: " + allPeople.size());

            } else if (args[0].contains("-i")) {
                Person upgradePerson = allPeople.get(Integer.parseInt(words[1]));
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
                String sex;
                sex = (upgradePerson.getSex() == Sex.MALE) ? "м" : "ж";
                System.out.println(upgradePerson.getName() + " " + sex + " " + dateFormat.format(upgradePerson.getBirthDate()));
//                System.out.println("длинна массива -i: " + allPeople.size());
            }
        }
//    }


    public static Sex checkSex(String[] words) {
        return words[words.length - 2].equals("м") ? Sex.MALE : Sex.FEMALE;
    }
